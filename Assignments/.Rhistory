# Chunk 1
# Load essential libraries
library(ggplot2)
library(dplyr)
# Chunk 2
# Load the house price dataset
hData = read.csv('D:/AAPS/Codes/Data/houseprices_cleaned.csv', header = TRUE, stringsAsFactors = FALSE, na.strings = c("", "NA", "Not available", "Not Available"))
str(hData)
# Chunk 3
# Convert 'locality', 'facing' and 'parking' columns to factors
categorical_cols = c("locality", "facing", "parking")
hData[categorical_cols] = lapply(hData[categorical_cols], as.factor)
str(hData)
# Chunk 4
# Continuous columns
continuous_cols = setdiff(colnames(hData), categorical_cols)
# Chunk 5
# Plot percentage of NAs in each column of the data frame
hData_NA = setNames(stack(sapply(hData, function(x){(sum(is.na(x))/length(x))*100}))[2:1], c('Feature','Value'))
p = ggplot(data = hData_NA, aes(x = Feature, y = Value)) +
geom_bar(stat = 'identity', fill = 'steelblue', width = 0.3) +
theme(text = element_text(size = 14, face = 'bold'),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
xlab('') + ylab('Percentage') +
ggtitle('Percentage of NAs across all features')
p
# Chunk 6
# Add NA as a factor level for categorical columns
hData[categorical_cols] = lapply(hData[categorical_cols], addNA)
str(hData)
# Chunk 7
# Make a histogram of rent values
p = ggplot(data = hData) +
geom_histogram(aes(x = rent, y = after_stat(..count..)), breaks = seq(mean(hData$rent)-4*sd(hData$rent),
mean(hData$rent)+4*sd(hData$rent), by = 25000), color = 'black', fill = 'blue') +
labs(x = 'Rent', y = 'Frequency')  +
theme(axis.text = element_text(size = 8),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 10, face = "bold"))  +
ggtitle('Histogram of house rents')
p
# Chunk 8
# Build a linear model to predict price per square feet as a function of rent. How accurate is the model?
model = lm(data = hData, price_per_sqft ~ rent)
summary(model)
# Calculate the accuracy of the linear regression model
predictions <- predict(model)
accuracy <- cor(hData$price_per_sqft, predictions)
accuracy
# Chunk 9
# Make a histogram of log-transformed rent values
hData['logrent'] = log(hData['rent'])
p = ggplot(data = hData) +
geom_histogram(aes(x = logrent, y = after_stat(..count..)),
breaks = seq(mean(hData$logrent)-4*sd(hData$logrent), mean(hData$logrent)+4*sd(hData$logrent), by = 0.5),
color = 'black', fill = 'blue') +
labs(x = 'Rent', y = 'Frequency')  +
theme(axis.text = element_text(size = 8),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 10, face = "bold"))  +
ggtitle('Histogram of house rents')
p
# Chunk 10
# Build a linear model to predict price per square feet as a function of logrent.
# Did log-transforming rent help improve the model accuracy?
model = lm(data = hData, price_per_sqft ~ logrent)
summary(model)
# Calculate the accuracy of the linear regression model
predictions = predict(model)
accuracy = cor(hData$price_per_sqft, predictions)
accuracy
# Chunk 11
# Build a linear model to predict log of price per square feet as a function of logrent.
#  Did log-transforming the response variable price per square feet improve the model accuracy?
hData['logprice_per_sqft'] = log(hData['price_per_sqft'])
model = lm(data = hData, logprice_per_sqft ~ logrent)
summary(model)
predictions <- predict(model)
accuracy <- cor(hData$logprice_per_sqft, predictions)
accuracy
# Chunk 12
# Build a linear model to predict sqrt of price per square feet as a function of logrent.
# Did sqrt-transforming the response variable price per square feet improve the model accuracy?
hData['sqrtprice_per_sqft'] = sqrt(hData['price_per_sqft'])
model = lm(data = hData, sqrtprice_per_sqft ~ logrent)
summary(model)
# Calculate the accuracy of the linear regression model
predictions = predict(model)
accuracy = cor(hData$sqrtprice_per_sqft, predictions)
accuracy
# Chunk 13
# Build a linear model to predict price per sqft as a function of area and rent.
# Did adding area as an additional predictor improve model accuracy (compared to only rent as the predictor)?
#  Also, interpret the coefficient estimates for area and rent practically.
model = lm(data = hData, sqrtprice_per_sqft ~ area + rent)
summary(model)
# Calculate the accuracy of the linear regression model
predictions = predict(model)
accuracy = cor(hData$price_per_sqft, predictions)
accuracy
# Chunk 14
# Build a linear model to predict sqrt of price per sqft as a function of logarea and logrent. Did log-transforming area improve model accuracy?
hData['logarea'] = log(hData['area'])
model = lm(data = hData, sqrtprice_per_sqft ~ logarea + logrent)
summary(model)
# Calculate the accuracy of the linear regression model
predictions = predict(model)
accuracy = cor(hData$sqrtprice_per_sqft, predictions)
accuracy
# Chunk 15
# Build a linear model to predict price per sqft as a function of area, rent, and parking (compared to just using area and rent as predictors).
# Did adding parking as an additional predictor improve model accuracy?
model = lm(data = hData, price_per_sqft ~ area + rent + parking)
summary(model)
# Calculate the accuracy of the linear regression model
predictions = predict(model)
accuracy = cor(hData$price_per_sqft, predictions)
accuracy
# Chunk 16
# Build a linear model to predict sqrt of price per sqft as a function of logarea, logrent, and locality.
# Did adding locality as an additional predictor improve model accuracy (compared to just using logarea and logrent as predictors)?
model = lm(data = hData, sqrtprice_per_sqft ~ logarea + logrent + locality)
summary(model)
# Calculate the accuracy of the linear regression model
predictions = predict(model)
accuracy = cor(hData$sqrtprice_per_sqft, predictions)
accuracy
# Chunk 17
# Build a linear model to predict price per sqft as a function of area, rent, and parking.
# How many levels does the categorical feature parking have?
# How many new variables are introduced for the categorical variable parking?
# Interpret all regression coefficient estimates except the intercept coefficient estimate beta0 practically.
#  Do the p-values suggest any insignificant features (that is, features which probably don't have a linear relationship with the response variable?
model = lm(data = hData, price_per_sqft ~ area + rent + parking)
summary(model)
nlevels(hData$parking)
# Chunk 18
# Create new columns corresponding to scaled versions of the continuous columns
hData[paste0('scaled_', continuous_cols)] = lapply(hData[continuous_cols], scale)
str(hData)
# Chunk 19
# Build a linear model to predict scaled price per sqft as a function of scaled area and scaled rent.
# Compare this with the model built using unscaled data: that is, predict price per sqft as a function of area and rent.
# Does scaling help?
model = lm(data = hData, scaled_price_per_sqft ~ scaled_area + scaled_rent)
summary(model)
# Chunk 20
# Rebuild a linear model to predict sqrt of price per sqft as a function of logarea, logrent, and locality which we will evaluate using a train-test split of the dataset
model = lm(data = hData, sqrtprice_per_sqft ~ ? + ? + ?)
# Rebuild a linear model to predict sqrt of price per sqft as a function of logarea, logrent, and locality which we will evaluate using a train-test split of the dataset
model = lm(data = hData, sqrtprice_per_sqft ~ logarea + logrent + locality)
summary(model)
#Calculate the accuracy of the linear regression model
predictions = predict(model)
accuracy = cor(hData$sqrtprice_per_sqft, predictions)
accuracy
# Split data into train (80%) and test (20%) sets and evaluate model performance on train and test sets. Run this cell multiple times for a random splitting of the data into train and test sets and report the model performance on the resulting train and test sets. Is there much variability in the model performance across different test sets? If that is the case, then the model is not generalizing well and is overfitting the train set. Is it the case here?
ind = sample(nrow(hData), size = floor(0.8*nrow(hData)), replace = FALSE)
hData_train = hData[ind, ]
hData_test = hData[-ind, ]
# Calculate RMSE (root-mean-squared-error) on train data
train_error = sqrt(mean((hData_train$price_per_sqft - predict(model, data = hData_test))^2))
# Calculate RMSE (root-mean-squared-error) on test data
test_error = sqrt(mean((hData_test$price_per_sqft - predict(model, data = hData_test))^2))
print(train_error)
print(test_error)
setwd("D:/AAPS/Assignments")
library(ggplot2)
library(dplyr)
library(reshape)
install.packages("reshape")
library(ggplot2)
library(dplyr)
library(reshape)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv('D:/AAPS/Codes/Data/diabetes.csv', header = TRUE, stringsAsFactors = FALSE)
str(df)
# Create a new feature called BMILEVEL using the BMI column and the following rules: BMI < 18.5 is underweight, 18.5 <= BMI <= 24.9 is healthy, 25 <= BMI <= 29.9 is overweight, BMI >= 30 is unhealthy
df = df %>% mutate(BMILEVEL = case_when(BMI < 18.5 ~ 'underweight', BMI >= 18.5 & BMI <= 24.9  ~ 'healthy', BMI <= 29.9 ~ 'overweight', BMI >= 30 ~ 'unhealthy'))
str(df)
# Convert 'GENDER' and 'BMILEVEL' columns to factors
categorical_cols = c('GENDER', 'BMILEVEL')
df[categorical_cols] = lapply(df[categorical_cols], as.factor)
# Convert 'GENDER' and 'BMILEVEL' columns to factors
categorical_cols = c('BMILEVEL')
df[categorical_cols] = lapply(df[categorical_cols], as.factor)
str(df)
# Create a list of continuous columns
continuous_cols = setdiff(colnames(df), categorical_cols)
continuous_cols
library(ggplot2)
library(dplyr)
library(reshape)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv('D:/AAPS/Codes/Data/diabetes.csv', header = TRUE, stringsAsFactors = FALSE)
str(df)
# Create a new feature called BMILEVEL using the BMI column and the following rules: BMI < 18.5 is underweight, 18.5 <= BMI <= 24.9 is healthy, 25 <= BMI <= 29.9 is overweight, BMI >= 30 is unhealthy
df = df %>% mutate(BMILEVEL = case_when(BMI < 18.5 ~ 'underweight', BMI >= 18.5 & BMI <= 24.9  ~ 'healthy', BMI <= 29.9 ~ 'overweight', BMI >= 30 ~ 'unhealthy'))
str(df)
# Convert 'GENDER' and 'BMILEVEL' columns to factors
categorical_cols = c('GENDER', 'BMILEVEL')
df[categorical_cols] = lapply(df[categorical_cols], as.factor)
str(df)
# Create a list of continuous columns
continuous_cols = setdiff(colnames(df), categorical_cols)
continuous_cols
# How many levels does the categorical variable *BMILEVEL* have? What is the reference level?
# Convert the vector to a factor
BMI_Factor <- factor(df[BMILEVEL])
# How many levels does the categorical variable *BMILEVEL* have? What is the reference level?
# Convert the vector to a factor
BMI_Factor <- factor(df$BMILEVEL)
# Print the factor levels
levels(BMI_Factor)
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
model = lm(data = df, Y ~ BMILEVEL)
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
model = lm(data = df, Y ~ BMILEVEL)
summary(model)
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
model = lm(data = df, Y ~ BMILEVEL)
summary(model)
predictions = predict(model)
accuracy = cor(df$BMILEVEL, predictions)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + c(S1, S2, S3, S4, S5, S6))
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + c('S1', 'S2', 'S3', 'S4', 'S5', 'S6'))
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + S1 + S2 + S3 + S4 + S5 + S6))
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + S1 + S2 + S3 + S4 + S5 + S6)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + S1 + S2 + S3 + S4 + S5 + S6)
summary(model)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + S1 + S2 + S3 + S4 + S5 + S6)
summary(model)
prediction = predict(model)
accuracy = cor(df$[BMILEVEL, S!, S2, S3, S4, S5, S6], predictions)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + S1 + S2 + S3 + S4 + S5 + S6)
summary(model)
prediction = predict(model)
accuracy = cor(df$[BMILEVEL, S1, S2, S3, S4, S5, S6], predictions)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + S1 + S2 + S3 + S4 + S5 + S6)
summary(model)
#Model for only S1, S5 and S63
better_model = lm(data = df, Y ~ BMILEVEL, S1,S5, S6)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + S1 + S2 + S3 + S4 + S5 + S6)
summary(model)
#Model for only S1, S5 and S63
better_model = lm(data = df, Y ~ BMILEVEL + S1 +S5 +S6)
summary(better_model)
# Fit a linear model for predicting disease progression using BMI, age, BP, and gender. How accurate is the model?
# According to the model, which gender has a worse disease progression? Explain why.
# For the same age, BP, and gender, decreasing BMI by 1 unit causes what change in the disease progression?
# For the same age and BP, which gender benefits better w.r.t. disease progressions by decreasing BMI by 1 unit. Explain.
model = lm(data = df, Y ~ BMI + AGE + BP + GENDER)
summary(model)
# Fit a linear model for predicting disease progression using BMI, age, BP, and gender. How accurate is the model?
# According to the model, which gender has a worse disease progression? Explain why.
# For the same age, BP, and gender, decreasing BMI by 1 unit causes what change in the disease progression?
# For the same age and BP, which gender benefits better w.r.t. disease progressions by decreasing BMI by 1 unit. Explain.
model = lm(data = df, Y ~ BMI + AGE + BP + GENDER)
summary(model)
predictions = predict(model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + S1 + S2 + S3 + S4 + S5 + S6)
summary(model)
predictions = predict(model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
#Model for only S1, S5 and S63
better_model = lm(data = df, Y ~ BMILEVEL + S1 +S5 +S6)
summary(better_model)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
'''model = lm(data = df, Y ~ BMILEVEL + S1 + S2 + S3 + S4 + S5 + S6)
summary(model)
predictions = predict(model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy'''
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + S1 + S2 + S3 + S4 + S5 + S6)
summary(model)
predictions = predict(model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
#Model for only S1, S5 and S63
better_model = lm(data = df, Y ~ BMILEVEL + S1 +S5 +S6)
summary(better_model)
predictions = predict(better_model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
# Fit a linear model for predicting disease progression using BMI, age, BP, and gender. How accurate is the model?
# According to the model, which gender has a worse disease progression? Explain why.
# For the same age, BP, and gender, decreasing BMI by 1 unit causes what change in the disease progression?
# For the same age and BP, which gender benefits better w.r.t. disease progressions by decreasing BMI by 1 unit. Explain.
model = lm(data = df, Y ~ BMI + AGE + BP + GENDER)
summary(model)
predictions = predict(model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
# Extract the coefficients from the model
coefficients <- coef(model)
# Find the coefficient for BMI
coeff_bmi <- coefficients["BMI"]
# Interpretation: A 1-unit decrease in BMI is associated with a change in disease progression
# equal to the coefficient for BMI, while holding age, BP, and gender constant.
change_in_disease_progression <- coeff_bmi
# Extract the coefficients from the model
coefficients <- coef(model)
# Find the coefficient for BMI
coeff_bmi <- coefficients["BMI"]
# Interpretation: A 1-unit decrease in BMI is associated with a change in disease progression
# equal to the coefficient for BMI, while holding age, BP, and gender constant.
change_in_disease_progression <- coeff_bmi
change_in_disease_progression
# Fit a linear model for predicting disease progression using BMI, age, BP, gender and interaction between BMI and gender. Is this model more accurate than the model without interaction between BMI and gender?
model = lm(data = df, Y ~ BMI + AGE + BP + GENDER + BMI:GENDER)
summary(model)
# Fit a linear model for predicting disease progression using BMI, age, BP, gender and interaction between BMI and gender. Is this model more accurate than the model without interaction between BMI and gender?
model = lm(data = df, Y ~ BMI + AGE + BP + GENDER + BMI:GENDER)
summary(model)
predictions = predict(model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
#model without interaction between BMI and Gender
model = lm(data = df, Y ~ BMI + AGE + BP + GENDER)
summary(model)
predictions = predict(model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
# Chunk 1
library(ggplot2)
library(dplyr)
library(reshape)
# Chunk 2
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv('D:/AAPS/Codes/Data/diabetes.csv', header = TRUE, stringsAsFactors = FALSE)
str(df)
# Chunk 3
# Create a new feature called BMILEVEL using the BMI column and the following rules: BMI < 18.5 is underweight, 18.5 <= BMI <= 24.9 is healthy, 25 <= BMI <= 29.9 is overweight, BMI >= 30 is unhealthy
df = df %>% mutate(BMILEVEL = case_when(BMI < 18.5 ~ 'underweight', BMI >= 18.5 & BMI <= 24.9  ~ 'healthy', BMI <= 29.9 ~ 'overweight', BMI >= 30 ~ 'unhealthy'))
str(df)
# Chunk 4
# Convert 'GENDER' and 'BMILEVEL' columns to factors
categorical_cols = c('GENDER', 'BMILEVEL')
df[categorical_cols] = lapply(df[categorical_cols], as.factor)
str(df)
# Chunk 5
# Create a list of continuous columns
continuous_cols = setdiff(colnames(df), categorical_cols)
continuous_cols
# Chunk 6
# How many levels does the categorical variable *BMILEVEL* have? What is the reference level?
# Convert the vector to a factor
BMI_Factor <- factor(df$BMILEVEL)
# Print the factor levels
levels(BMI_Factor)
# Chunk 7
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
model = lm(data = df, Y ~ BMILEVEL)
summary(model)
# Chunk 8
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
model = lm(data = df, Y ~ BMILEVEL + S1 + S2 + S3 + S4 + S5 + S6)
summary(model)
predictions = predict(model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
#Model for only S1, S5 and S63
better_model = lm(data = df, Y ~ BMILEVEL + S1 +S5 +S6)
summary(better_model)
predictions = predict(better_model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
# Chunk 9
# Fit a linear model for predicting disease progression using BMI, age, BP, and gender. How accurate is the model?
# According to the model, which gender has a worse disease progression? Explain why.
# For the same age, BP, and gender, decreasing BMI by 1 unit causes what change in the disease progression?
# For the same age and BP, which gender benefits better w.r.t. disease progressions by decreasing BMI by 1 unit. Explain.
model = lm(data = df, Y ~ BMI + AGE + BP + GENDER)
summary(model)
predictions = predict(model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
# Chunk 10
# Extract the coefficients from the model
coefficients <- coef(model)
# Find the coefficient for BMI
coeff_bmi <- coefficients["BMI"]
# Interpretation: A 1-unit decrease in BMI is associated with a change in disease progression
# equal to the coefficient for BMI, while holding age, BP, and gender constant.
change_in_disease_progression <- coeff_bmi
change_in_disease_progression
# Chunk 11
# Fit a linear model for predicting disease progression using BMI, age, BP, gender and interaction between BMI and gender. Is this model more accurate than the model without interaction between BMI and gender?
model = lm(data = df, Y ~ BMI + AGE + BP + GENDER + BMI:GENDER)
summary(model)
predictions = predict(model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
# Chunk 12
#model without interaction between BMI and Gender
model = lm(data = df, Y ~ BMI + AGE + BP + GENDER)
summary(model)
predictions = predict(model, newdata = df)
accuracy = cor(df$Y, predictions)
accuracy
