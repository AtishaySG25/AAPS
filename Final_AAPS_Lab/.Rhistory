# Check event that one hand has all four aces
checkEvent3 = function(data){
condition1 = (sum(grepl('A', data)) == 4)
condition2 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 1)
return(condition1 & condition2)
}
# Check event that exactly 3 aces are dealt
checkEvent1 = function(data){
return(sum(grepl('A', data)) == 3)
}
# Check event that 4 hands have exactly one ace each
checkEvent2 = function(data){
condition1 = (sum(grepl('A', data)) == 4)
condition2 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 4)
return(condition1 & condition2)
}
# Check event that one hand has all four aces
checkEvent3 = function(data){
condition1 = (sum(grepl('A', data)) == 4)
condition2 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 1)
return(condition1 & condition2)
}
# Check event given that the ace of spades was among the cards dealt, that it is in a hand with at least one other spade.
checkEvent4 = function(data){
hand = ceiling(which(data == 'AS') / 5)
return('AH' %in% data[c((1+(hand-1)*5):(hand*5))] | 'AD' %in% data[c((1+(hand-1)*5):(hand*5))] | 'AC' %in% data[c((1+(hand-1)*5):(hand*5))])
}
# Calculate probability that exactly 3 aces are dealt
mean(apply(simulatedData, 2, checkEvent1))
# Calculate probability that 4 hands have exactly one ace each
mean(apply(simulatedData, 2, checkEvent2))
# Calculate probability that 4 hands have exactly one ace each
mean(apply(simulatedData, 2, checkEvent2))
# Calculate probability that one hand has all four aces
mean(apply(simulatedData, 2, checkEvent3))
# Calculate probability given that the ace of spades was among the cards dealt, find the probability that it is in a hand with at least one other spade.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return('AS' %in% data)})]
mean(apply(simulatedData_reduced, 2, checkEvent3))
# Calculate probability given that the ace of spades was among the cards dealt, find the probability that it is in a hand with at least one other spade.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return('AS' %in% data)})]
mean(apply(simulatedData_reduced, 2, checkEvent4))
choose(8,4)**factorial(4)*(5^4)/(52*57*50*49)
choose(8,4)**factorial(4)*(5^4)/(52*51*50*49)
choose(8,4)*factorial(4)*(5^4)/(52*51*50*49)
# Calculate probability that 4 hands have exactly one ace each
mean(apply(simulatedData, 2, checkEvent2))
choose(8,4)*factorial(4)*(5^4)/(52*51*50*49)
data
condition1 = (sum(grepl('A', data)) == 4)
condition1
condition2 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 4)
condition2
which(grepl('A', data))
apply(simulatedData, 2, checkEvent2)
apply(simulatedData[, 1:10], 2, checkEvent2)
apply(simulatedData[, 1:100], 2, checkEvent2)
simulatedData[, 12]
which(apply(simulatedData, 2, checkEvent2))
which(apply(simulatedData[, 1:100], 2, checkEvent2))
simulatedData[, 15]
len(s)
length(s)
# Generate a 52-card deck
suits = c('H', 'D', 'S', 'C')
cards = c(2:10, 'J', 'Q', 'K', 'A')
s = paste0(rep(cards, length(suits)), rep(suits, each = length(cards)))
# Simulate dealing 5 cards to 8 hands (40 cards)
nsimulations = 1e5
simulatedData = replicate(nsimulations, sample(s, size = 40, prob = rep(1/length(s), length(s))))
# Check event that exactly 3 aces are dealt
checkEvent1 = function(data){
return(sum(grepl('A', data)) == 3)
}
# Check event that 4 hands have exactly one ace each
checkEvent2 = function(data){
condition1 = (sum(grepl('A', data)) == 4)
condition2 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 4)
return(condition1 & condition2)
}
# Check event that one hand has all four aces
checkEvent3 = function(data){
condition1 = (sum(grepl('A', data)) == 4)
condition2 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 1)
return(condition1 & condition2)
}
# Check event given that the ace of spades was among the cards dealt, that it is in a hand with at least one other spade.
checkEvent4 = function(data){
hand = ceiling(which(data == 'AS') / 5)
return('AH' %in% data[c((1+(hand-1)*5):(hand*5))] | 'AD' %in% data[c((1+(hand-1)*5):(hand*5))] | 'AC' %in% data[c((1+(hand-1)*5):(hand*5))])
}
# Calculate probability that exactly 3 aces are dealt
mean(apply(simulatedData, 2, checkEvent1))
# Calculate probability that 4 hands have exactly one ace each
mean(apply(simulatedData, 2, checkEvent2))
choose(8,4)*factorial(4)*(5^4)/(52*51*50*49)
# Calculate probability that one hand has all four aces
mean(apply(simulatedData, 2, checkEvent3))
# Calculate probability given that the ace of spades was among the cards dealt, that it is in a hand with at least one other spade.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return('AS' %in% data)})]
mean(apply(simulatedData_reduced, 2, checkEvent4))
# Check event given that exactly two aces and two queens were dealt, find the probability that both aces are together in one hand and both queens are together in a different hand.
checkEvent5 = function(data){
condition1 = (length(unique(ceiling(which(data == 'A') / 5))) == 1)
condition2 = (length(unique(ceiling(which(data == 'Q') / 5))) == 1)
return(condition1 & condition2)
}
data
data
grepl(data, 'A')
unique(ceiling(which(grepl('A', data)) /5))
# Check event given that exactly two aces and two queens were dealt, find the probability that both aces are together in one hand and both queens are together in a different hand.
checkEvent5 = function(data){
condition1 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 1)
condition2 = (length(unique(ceiling(which(grepl('Q', data)) /5))) == 1)
condition3 = ((ceiling(which(grepl('A', data)) /5)) != (ceiling(which(grepl('Q', data)) /5)))
return(condition1 & condition2 & condition3)
}
data
grepl('A', data)
sum(grepl('A', data))
sum(grepl('A', data)) == 2
sum(grepl('Q', data)) == 2
# Calculate probability given that exactly two aces and two queens were dealt, find the probability that both aces are together in one hand and both queens are together in a different hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2)})]
mean(apply(simulatedData_reduced, 2, checkEvent5))
8*7*(factorial(5)^2)/(factorial(3)^2)
# Calculate probability given that exactly two aces and two queens were dealt, find the probability that both aces are together in one hand and both queens are together in a different hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2)})]
mean(apply(simulatedData_reduced, 2, checkEvent5))
# Check event given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand that all four of those cards are together in the same hand.
checkEvent6 = function(data){
return(unique(ceiling(which(grepl('A', data)) /5)) == unique(ceiling(which(grepl('Q', data)) /5)))
}
unique(ceiling(which(grepl('Q', data)) /5)
x
unique(ceiling(which(grepl('Q', data)) /5))
length(unique(ceiling(which(grepl('Q', data)) /5))) == 1
# Calculate probability given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand, find the probability that all four of those cards are together in the same hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2) & length(unique(ceiling(which(grepl('A', data)) /5))) == 1 & length(unique(ceiling(which(grepl('Q', data)) /5))) == 1})]
mean(apply(simulatedData_reduced, 2, checkEvent6))
# Calculate probability given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand, find the probability that all four of those cards are together in the same hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2 & length(unique(ceiling(which(grepl('A', data)) /5))) == 1 & length(unique(ceiling(which(grepl('Q', data)) /5))) == 1)})]
mean(apply(simulatedData_reduced, 2, checkEvent6))
# Calculate probability given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand, find the probability that all four of those cards are together in the same hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2 & length(unique(ceiling(which(grepl('A', data)) /5))) == 1 & length(unique(ceiling(which(grepl('Q', data)) /5))) == 1)})]
mean(apply(simulatedData_reduced, 2, checkEvent6))
# Calculate probability given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand, find the probability that all four of those cards are together in the same hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2 & length(unique(ceiling(which(grepl('A', data)) /5))) == 1 & length(unique(ceiling(which(grepl('Q', data)) /5))) == 1)})]
mean(apply(simulatedData_reduced, 2, checkEvent6))
simulatedData_reduced[, 1]
# Calculate probability given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand, find the probability that all four of those cards are together in the same hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2 & length(unique(ceiling(which(grepl('A', data)) /5))) == 1 & length(unique(ceiling(which(grepl('Q', data)) /5))) == 1)})]
mean(apply(simulatedData_reduced, 2, checkEvent6))
library(ggplot2) # plotting library
library(dplyr)   # data wrangling library
suits = c('H', 'D', 'S', 'C')
cards = c('A', 2:10, 'J', 'Q', 'K')
s = paste0(rep(cards, length(suits)), rep(suits, each = length(cards)))
s
x = c('A', 'A', 'B', 'A', 'B', 'C', 'C', 'A')
grepl('A', x)
x = c('AS', 'AD', '1D', '9C', 'AC', '10C', '8H', '7H')
grepl('A', x)
sum(grepl('A', x))
y = c(1, 1, 2, 2, 3, 3, 3)
unique(y)
length(y)
7/6
ceiling(7/6)
ceiling(1)
ceiling(3)
ceiling(2.99999999)
grepl
x = c(TRUE, FALSE, FALSE, TRUE)
which(x)
length(x)
unique(x)
str(simulatedData)
simulatedData[, 1:3]
data = simulatedData[, 1]
data
grepl('A', data)
sum(grepl('A', data))
sum(grepl('A', data)) == 3
# Check event that exactly 3 aces are dealt
checkEvent1 = function(data){
return(sum(grepl('A', data)) == 3)
}
# Calculate probability that exactly 3 aces are dealt
mean(apply(simulatedData, 2, checkEvent1))
which(apply(simulatedData, 2, function(data){return(sum(grepl('A', data)) == 4)}))
data = simulatedData[, 2943]
data
sum(grepl('A', data)) == 4
grepl('A', data)
sum(grepl('A', data))
sum(grepl('A', data)) == 4
data
grepl('A', data)
which(grepl('A', data))
which(grepl('A', data)) / 5
ceiling(which(grepl('A', data)) / 5)
unique(ceiling(which(grepl('A', data)) / 5))
length(unique(ceiling(which(grepl('A', data)) / 5))) == 4
# Check event that 4 hands have exactly one ace each
checkEvent2 = function(data){
condition1 = (sum(grepl('A', data)) == 4)
condition2 = (length(unique(ceiling(which(grepl('A', data)) / 5))) == 4)
return(condition1 & condition2)
}
# Calculate probability that 4 hands have exactly one ace each
mean(apply(simulatedData, 2, checkEvent2))
which(apply(simulatedData, 2, function(data){return(sum(grepl('A', data)) == 4)}))
simulatedData[, 2984]
data = simulatedData[, 2984]
grepl('A', data)
length(unique(ceiling(which(grepl('A', data)) / 5))) == 4
ceiling(which(grepl('A', data)) / 5)
which(grepl('A', data))
nsuccess = 4
nfailure = 48
n = 40
j = 3
dhyper(j, nsuccess, nfailure, n)
choose(4, 3)*choose(48, 37) / choose(52, 40)
dhyper(1, nsuccess, nfailure, n)
dhyper(1, nsuccess, nfailure, n)
dhyper(2, nsuccess, nfailure, n)
dhyper(3, nsuccess, nfailure, n)
dhyper(4, nsuccess, nfailure, n)
dhyper(c(1:4), nsuccess, nfailure, n)
sum(dhyper(c(1:4), nsuccess, nfailure, n))
1-dhyper(0, nsuccess, nfailure, n)
phyper(3, nsuccess, nfailure, n)
dhyper(3, nsuccess, nfailure, n)
nsimulations = 10
rhyper(nsimualtions, nsuccess, nfailure, n)
rhyper(nsimulations, nsuccess, nfailure, n)
simulatedData = rhyper(1000, nsuccess, nfailure, n)
mean(simulatedData == 3)
mean(simulatedData <= 3)
r = 20
p = 0.2
j = 100
dnbinom(j-r, r, p)
j = 1000
dnbinom(j-r, r, p)
j = 20
dnbinom(j-r, r, p)
j = 50
dnbinom(j-r, r, p)
j = 100
dnbinom(j-r, r, p)
j = 200
dnbinom(j-r, r, p)
r = 20
p = 0.2
j = c(20:200)
dnbinom(j-r, r, p)
r = 20
p = 0.2
j = c(20:200)
cbind(j, dnbinom(j-r, r, p))
r = 20
p = 0.2
j = c(20:200)
as.data.frame(cbind(j, dnbinom(j-r, r, p)))
r = 20
p = 0.2
j = c(20:200)
df = as.data.frame(cbind(j, dnbinom(j-r, r, p)))
colnames(df) = c('j', 'probability')
head(df)
r = 20
p = 0.2
j = c(20:200)
df = as.data.frame(cbind(j, dnbinom(j-r, r, p)))
colnames(df) = c('j', 'probability')
p = ggplot(data = df) +
geom_bar(aes(x = j, y = probability), width = 0.1)
p
r = 20
p = 0.2
j = c(20:200)
df = as.data.frame(cbind(j, dnbinom(j-r, r, p)))
colnames(df) = c('j', 'probability')
p = ggplot(data = df) +
geom_col(aes(x = j, y = probability), width = 0.1)
p
r = 20
p = 0.2
j = c(20:200)
df = as.data.frame(cbind(j, dnbinom(j-r, r, p)))
colnames(df) = c('j', 'probability')
p = ggplot(data = df) +
geom_col(aes(x = j, y = probability))
p
x = c(1, -2, 10, 40, 15, -15, -20)
max(x)
argmax(x)
argmax?
x
argmax(x)
which.max(x)
x
max(x)
which.max(x)
library(ggplot2) # plotting library
library(dplyr)   # data wrangling library
# Generate a 52-card deck
suits = c('H', 'D', 'S', 'C')
cards = c(2:10, 'J', 'Q', 'K', 'A')
s = paste0(rep(cards, length(suits)), rep(suits, each = length(cards)))
# Simulate dealing 5 cards to 8 hands (40 cards)
nsimulations = 1e5
simulatedData = replicate(nsimulations, sample(s, size = 40, prob = rep(1/length(s), length(s))))
# Check event that exactly 3 aces are dealt
checkEvent1 = function(data){
return(sum(grepl('A', data)) == 3)
}
# Check event that 4 hands have exactly one ace each
checkEvent2 = function(data){
condition1 = (sum(grepl('A', data)) == 4)
condition2 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 4)
return(condition1 & condition2)
}
# Check event that one hand has all four aces
checkEvent3 = function(data){
condition1 = (sum(grepl('A', data)) == 4)
condition2 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 1)
return(condition1 & condition2)
}
# Check event given that the ace of spades was among the cards dealt, that it is in a hand with at least one other spade.
checkEvent4 = function(data){
hand = ceiling(which(data == 'AS') / 5)
return('AH' %in% data[c((1+(hand-1)*5):(hand*5))] | 'AD' %in% data[c((1+(hand-1)*5):(hand*5))] | 'AC' %in% data[c((1+(hand-1)*5):(hand*5))])
}
# Check event given that exactly two aces and two queens were dealt, that both aces are together in one hand and both queens are together in a different hand.
checkEvent5 = function(data){
condition1 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 1)
condition2 = (length(unique(ceiling(which(grepl('Q', data)) /5))) == 1)
condition3 = ((ceiling(which(grepl('A', data)) /5)) != (ceiling(which(grepl('Q', data)) /5)))
return(condition1 & condition2 & condition3)
}
# Check event given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand that all four of those cards are together in the same hand.
checkEvent6 = function(data){
return(unique(ceiling(which(grepl('A', data)) /5)) == unique(ceiling(which(grepl('Q', data)) /5)))
}
# Calculate probability that exactly 3 aces are dealt
mean(apply(simulatedData, 2, checkEvent1))
# Calculate probability that 4 hands have exactly one ace each
mean(apply(simulatedData, 2, checkEvent2))
# Calculate probability that one hand has all four aces
mean(apply(simulatedData, 2, checkEvent3))
# Calculate probability given that the ace of spades was among the cards dealt, that it is in a hand with at least one other spade.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return('AS' %in% data)})]
mean(apply(simulatedData_reduced, 2, checkEvent4))
# Calculate probability given that exactly two aces and two queens were dealt, find the probability that both aces are together in one hand and both queens are together in a different hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return('AS' %in% data)})]
mean(apply(simulatedData_reduced, 2, checkEvent4))
# Calculate probability given that exactly two aces and two queens were dealt, find the probability that both aces are together in one hand and both queens are together in a different hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return('AS' %in% data)})]
mean(apply(simulatedData_reduced, 2, checkEvent4))
# Calculate probability given that exactly two aces and two queens were dealt, find the probability that both aces are together in one hand and both queens are together in a different hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2)})]
mean(apply(simulatedData_reduced, 2, checkEvent5))
x = [1, 2]
y = [3, 3]
x = [1, 2]
x = c(1, 2)
y = c(3, 3)
x != y
y = c(4, 5)
x != y
x = c(2, 3)
y = c(2, 3)
x != y
# Calculate probability given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand, find the probability that all four of those cards are together in the same hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2 & length(unique(ceiling(which(grepl('A', data)) /5))) == 1 & length(unique(ceiling(which(grepl('Q', data)) /5))) == 1)})]
mean(apply(simulatedData_reduced, 2, checkEvent6))
(pbinom(2, 10, 0.1) * 0.2) / (pbinom(2, 10, 0.1) * 0.2 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.4)
(pbinom(2, 10, 0.1) * 0.3) / (pbinom(2, 10, 0.1) * 0.2 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.4)
(pbinom(2, 10, 0.1) * 0.4) / (pbinom(2, 10, 0.1) * 0.2 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.4)
(pbinom(2, 10, 0.1) * 0.4) / (pbinom(2, 10, 0.1) * 0.4 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.4)
(pbinom(2, 10, 0.1) * 0.4) / (pbinom(2, 10, 0.1) * 0.4 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.4)
(pbinom(2, 10, 0.1) * 0.4) / (pbinom(2, 10, 0.1) * 0.4 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.2)
pexp(20*5*365, 1/10000)
pexp(23*5*365, 1/10000)
pexp(16*5*365, 1/10000)
pexp(10*5*365, 1/10000)
1-pexp(20*5*365, 1/10000)
1-pexp(20*5*365, 1/20000)
pexp(20*5*365, 1/20000)
pexp(20*5*365, 1/5000)
pexp(23*5*365, 1/5000)
pexp(23*10*365, 1/5000)
pexp(20*2*365, 1/5000)
pexp(20*1*365, 1/5000)
1-pexp(20*1*365, 1/5000)
z = (80-(85/15))
z
z = (80-(85/15)) / sqrt(75/(15^2))
z
sqrt(75/(15^2))
80-(85/15)
z = (80-(85/15)) / sqrt(75/15)
z
z = (80-85) / sqrt(75/15)
z
1-pnorm(z)
1-((75/15)/((75/15)+80^2))
1-((75/15)/((75/15)+5^2))
(75/15)/((75/15)+5^2)
# Load essential libraries
library(ggplot2)
library(dplyr)
library(HSAUR)
library(ggcorrplot)
library(reshape2)
# Simulate age of 100 senior adults in years
n = 100
age_years = round(rnorm(n, mean = 50, sd = 10), 0)
print(age_years)
# Create a copy of the age variable to reflect age in months
age_months = 12*age_years
print(age_months)
# Create another copy that adds a bit of noise to the age (in years) variable
age_noisy = age_years + rnorm(n, mean = 0, sd = 4)
print(age_noisy)
# Simulate a population model for height as a function of age (in years)
height = 20 + 3*age_years + rnorm(n, mean = 0, sd = 10)
print(height)
plot(age_years, height)
plot(age_years, height)
height
age_years
plot(age_years, height)
# Create a dataframe with all the predictors and the response
hData = data.frame(age_years, age_months, age_noisy, height)
head(hData)
# Create a dataframe with all the predictors and the response
hData = data.frame(age_years, age_months, age_noisy, height)
head(hData)
model = lm(data = hData, height ~ age_years + age_months)
summary(model)
# A quick way to visualize the relationship between the response and individual predictors
pairs(hData)
# Calculate correlation matrix for all predictors
hData %>% select(-c(height))
#cormat =
# A quick way to visualize the relationship between the response and individual predictors
pairs(hData)
cormat
# Calculate correlation matrix for all predictors
cormat = cor(hData %>% select(-c(height)))
cormat
# Calculate correlation matrix for all predictors
cormat = round(cor(hData %>% select(-c(height))), 2)
cormat
# Set lower-triangular part of correlation matrix to NA
cormat[lower.tri(cormat)] = NA
print(cormat)
# Melt the correlation matrix
melt(cormat)
print(cormat)
melt(cormat)
# Visualize the correlation matrix using ggplot
p = ggplot() + geom_tile(color = 'white') +
coord_fixed() +
scale_fill_gradient2(low = 'blue', high = 'red', mid = 'white', midpoint = 0, limit = c(-1, 1), space = 'Lab', name = 'Correlation')
p
# Visualize the correlation matrix using ggplot
p = ggplot() + geom_tile(color = 'white') +
coord_fixed() +
scale_fill_gradient2(low = 'blue', high = 'red', mid = 'white', midpoint = 0, limit = c(-1, 1), space = 'Lab', name = 'Correlation')
p
p
# Visualize the correlation matrix using ggplot
p = ggplot() + geom_tile(color = 'white') +
coord_fixed() +
scale_fill_gradient2(low = 'blue', high = 'red', mid = 'white', midpoint = 0, limit = c(-1, 1), space = 'Lab', name = 'Correlation')
p
# Visualize the correlation matrix using ggplot
p = ggplot() + geom_tile(color = 'white') +
coord_fixed() +
scale_fill_gradient2(low = 'blue', high = 'red', mid = 'white', midpoint = 0, limit = c(-1, 1), space = 'Lab', name = 'Correlation')
p
# Visualize the correlation matrix using ggplot
p = ggplot() + geom_tile(color = 'white') +
coord_fixed() +
scale_fill_gradient2(low = 'blue', high = 'red', mid = 'white', midpoint = 0, limit = c(-1, 1), space = 'Lab', name = 'Correlation')
p
# Visualize the correlation matrix using ggplot
p = ggplot() + geom_tile(color = 'white') +
coord_fixed() +
scale_fill_gradient2(low = 'blue', high = 'red', mid = 'white', midpoint = 0, limit = c(-1, 1), space = 'Lab', name = 'Correlation')
p
# Visualize the correlation matrix using ggplot
p = ggplot() + geom_tile(color = 'white') +
coord_fixed() +
scale_fill_gradient2(low = 'blue', high = 'red', mid = 'white', midpoint = 0, limit = c(-1, 1), space = 'Lab', name = 'Correlation')
p
dbinom(8, 10, 0.5)
dbinom(7, 10, 0.5)
1-pbinom(6, 10, 0.5)
1-pbinom(7, 10, 0.5)
1-pbinom(8, 10, 0.5)
setwd("D:/OneDrive - Manipal Academy of Higher Education/EvenSemester2024/AML5201/Codes")
n = 10
p = 0.5
pbinom(7, n, p)
1 - pbinom(7, n, p)
